<?php
/**
 * @file
 * A description of what your module does.
 *
 */

/**
 * Implements hook_permission().
 */
function webform_storage_toggle_permission() {
  $permissions = array(
    'update anonymous submission' => array(
      'title' => t('Anonymous submission updates'),
      'description' => t('Allows updating of submission values through rules by an anonymous user.'),
    ),
  );

  return $permissions;
}

/**
 * Form Elements
 */
function webform_storage_toggle_form($toggle_settings) {
  // Add our config options to the webform settings page.
  $form['storage_toggle'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform Storage Options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 25,
  );

  $form['storage_toggle']['webform_storage_toggle_null_flag'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable the use of a NULL value as a replacement'),
    '#default_value' => $toggle_settings['null_flag'],
    '#description' => t('<p>When the storage toggle to obfuscate the field\'s submission is set, make that value NULL. This will ensure nothing is stored in the DB. Depending on the type of field, this could be a <strong>blank</strong> space, the number <strong>0</strong> or for a boolean <strong>FALSE</strong>.</p><p><strong>It is strongly urged not to use this for booleans as it could lead to confusing results.</strong></p><p>Note: you can in fact disable this functionality altogether by unchecking this box. Useful when debugging tables and you need the values to the filled even though the fields have been individually selected.</p><p>The following component types not included: <strong>fieldset</strong>, <strong>file</strong>, <strong>markup</strong>, <strong>pagebreak</strong>, <strong>grid</strong>, <strong>hidden</strong></p>'),
  );

  $form['storage_toggle']['webform_storage_toggle_use_textfield_replacement'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use a different string as opposed to a NULL for textfields'),
    '#default_value' => $toggle_settings['use_textfield_replacement'],
    '#description' => t('In the very rare occasion you need some kind of different value in the textfields as opposed to a blank space or NULL value. Select this checkbox and fill in the field below'),
  );

  $form['storage_toggle']['webform_storage_toggle_obfuscation_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Obfuscation value'),
    '#default_value' => $toggle_settings['obfuscation_value'],
    '#description' => t('This value will be used in the replacement of submission textfield values.'),
    '#states' => array(
      'visible' => array(
        ':input[name="webform_storage_toggle_use_textfield_replacement"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['storage_toggle']['webform_storage_toggle_obfuscation_display_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Obfuscation display text'),
    '#default_value' => $toggle_settings['obfuscation_display_text'],
    '#description' => t('Any fields using the obfuscation replacement will have their displayed values replaced with this text.'),
  );

  return $form;
}
/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_storage_toggle_form_webform_admin_settings_alter(&$form, $form_state) {
  $toggle_settings = variable_get('webform_storage_toggle_settings');

  $node = $form['#node'];

  $form['#submit'] += array(
    'webform_storage_toggle_admin_settings_form_submit_save',
  );

  $form += webform_storage_toggle_form($toggle_settings);
}

/**
 * Implementation of the form submit save()
 */
function webform_storage_toggle_admin_settings_form_submit_save($form, &$form_state) {
  $toggle_settings = variable_get('webform_storage_toggle_settings');

  $toggle_settings['null_flag'] = $form_state['values']['webform_storage_toggle_null_flag'];
  $toggle_settings['use_textfield_replacement'] = $form_state['values']['webform_storage_toggle_use_textfield_replacement'];
  $toggle_settings['obfuscation_value'] = check_plain($form_state['values']['webform_storage_toggle_obfuscation_value']);
  $toggle_settings['obfuscation_display_text'] = check_plain($form_state['values']['webform_storage_toggle_obfuscation_display_text']);

  variable_set('webform_storage_toggle_settings', $toggle_settings);

  drupal_set_message('Storage Toggle settings have been successfully saved.');
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_storage_toggle_form_webform_configure_form_alter(&$form, &$form_state, $form_id) {
  $toggle_settings = variable_get('webform_storage_toggle_settings');

  $node = $form['#node'];

  $form['#submit'] += array(
    'webform_storage_toggle_configure_form_submit_save',
  );

  if (!empty($node->webform['nid'])) {
    $toggle_settings += array($node->webform['nid'] => array(
      'null_flag' => FALSE,
      'use_textfield_replacement' => FALSE,
      'obfuscation_value' => '',
      'obfuscation_display_text' => t('n/a'),
    ));
  }

  $current_webform_settings = $toggle_settings[$node->webform['nid']];

  $form += webform_storage_toggle_form($current_webform_settings);

}

/**
 * Implementation of the form submit save()
 */
function webform_storage_toggle_configure_form_submit_save($form, &$form_state) {
  $toggle_settings = variable_get('webform_storage_toggle_settings');

  $node = $form['#node'];

  $toggle_settings[$node->webform['nid']] = array(
    'null_flag' => $form_state['values']['webform_storage_toggle_null_flag'],
    'use_textfield_replacement' => $form_state['values']['webform_storage_toggle_use_textfield_replacement'],
    'obfuscation_value' => check_plain($form_state['values']['webform_storage_toggle_obfuscation_value']),
    'obfuscation_display_text' => check_plain($form_state['values']['webform_storage_toggle_obfuscation_display_text']),
  );

  variable_set('webform_storage_toggle_settings', $toggle_settings);

  drupal_set_message('Storage Toggle settings have been successfully saved.');
}

/**
 * Implements hook_node_delete().
 *
 * We need to remove any settings associated with a delete WebForm Node.
 * This is done by unsetting the array and updating the variable.
 */
function webform_storage_toggle_node_delete($node)
{
  if (!variable_get('webform_node_' . $node->type, FALSE)) {
    return;
  }

  $toggle_settings = variable_get('webform_storage_toggle_settings');

  if (!empty($toggle_settings[$node->nid])) {
    unset($toggle_settings[$node->nid]);
    variable_set('webform_storage_toggle_settings', $toggle_settings);
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function webform_storage_toggle_form_webform_component_edit_form_alter(&$form, $form_state) {
  // Add our fields to the component add/edit form.
  $component = $form_state['build_info']['args'][1];

  // Exclude webform component types that don't make sense to toggle.
  $excluded_types = array('fieldset', 'file', 'markup', 'pagebreak', 'grid', 'hidden');
  if (!in_array($form['type']['#value'], $excluded_types)) {

    // Add settings for storage toggle features.
    $form['storage'] = array(
      '#type' => 'fieldset',
      '#title' => t('Field Storage Options'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => 10,
    );

    $form['storage']['db_toggle'] = array(
      '#type' => 'checkbox',
      '#title' => t('Do not store this field\'s value in the DB'),
      '#description' => t('This option will bypass the storing of this field\'s value in the DB. This ensures the data is only captured in memory and kept until the submission process is completed and all othe processing is complete. In place of the submission, a replacement value will be saved. The value may be modified in the global <a href="!url">Webform settings</a>.', array('!url' => url('admin/config/content/webform'))),
      '#default_value' => isset($component['extra']['db_toggle']) ? $component['extra']['db_toggle'] : 0,
    );

    $process_order_options = array('on' => t('On Submission'));

    if (module_enable('rules')) {
      $process_order_options['post'] = t('Post Submission using Rules');
    }

    $form['storage']['webform_storage_toggle_process_order'] = array(
      '#type' => 'radios',
      '#title' => t('Process Order'),
      '#options' => $process_order_options,
      '#default_value' => isset($component['extra']['webform_storage_toggle_process_order']) ? $component['extra']['webform_storage_toggle_process_order'] : 'on',
      '#description' => t('The default process is for storage obfuscation to happen <strong>on submission</strong>. If you wish to have the field value be obfuscated later in the process, we suggest using the <strong>rules</strong> module to allow the submission to be modified. Selecting <strong>Post Submission using Rules</strong> will allow the Rules Action to effectively check this value and automatically set it for you. You should not have to setup your submission variables or write any extra rules plugins for this to work.'),
    );
  }
}

/**
 * Implementation of hook_form_alter().
 */
function webform_storage_toggle_form_alter(&$form, &$form_state, $form_id) {
  // When we are editing a webform submission,
  if (strpos($form_id, 'webform_client_form_') === 0 && $form['details']['sid']['#value']) {
    _webform_storage_toggle_display_obfuscation_text($form);
  }
}

/**
 * Implementation of hook_webform_component_presave().
 * Save db_toggle settings for a component.
 */
function webform_storage_toggle_webform_component_presave(&$component) {
  if (!empty($component['storage'])) {
    $component['extra'] = array_merge($component['extra'], $component['storage']);
    unset($component['storage']);
  }
}

/**
 * Implementation of hook_webform_submission_presave().
 * Kill the value if the component has been marked as such.
 */
function webform_storage_toggle_webform_submission_presave($node, &$submission) {
  foreach ($submission->data as $cid => $entry) {
    $component = $node->webform['components'][$cid];
    if (webform_storage_toggle_obfuscate_check($component)) {
      foreach ($submission->data[$cid] as $delta => $value) {
        $submission->data[$cid][$delta] = _webform_storage_toggle_obfuscate_value($component);
      }
    }
  }
}

/**
 * Implementation of hook_webform_submission_load().
 * Ensure loading killed values brings up a notice for this such that results
 * do not look odd. A notice should be included in the table or cell row
 */
function webform_storage_toggle_webform_submission_load($submissions) {
  foreach ($submissions as $submission) {
    $node = node_load($submission->nid);
    foreach ($submission->data as $cid => $entry) {
      $component = $node->webform['components'][$cid];
      if ($component['extra']['db_toggle'] == TRUE) {
        foreach ($submission->data[$cid] as $delta => $value) {
          if (!empty($entry[$delta]) && @unserialize($entry[$delta]) !== FALSE) {
            $submission->data[$cid][$delta] = _webform_storage_toggle_load_obfuscation_text($submission->nid);
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook_webform_submission_render_alter().
 * Ensure loading killed values brings up a notice when displaying
 * webform submissions.
 */
function webform_storage_toggle_webform_submission_render_alter(&$renderable) {
  // First, determine if 1) if we are dealing with an email or a page view
  if (!empty($renderable['#email'])) {
    // If we are, then try to match a user to the email address we are sending to.
    $uid = db_query('SELECT uid FROM {users} WHERE mail = ?', array($renderable['#email']['email']))->fetchField();
    $account = $uid ? user_load($uid) : NULL;
  } else {
    $account = NULL;
  }

  // Next, we loop through components and bounce the values as necessary.
  _webform_storage_toggle_obfuscated_values($renderable, '#value', array('account' => $account));
}

/**
 * Preprocess for theme('webform_results_table').
 */
function webform_storage_toggle_preprocess_webform_results_table(&$vars) {
  foreach ($vars['submissions'] as $sid => &$submission) {
    foreach ($submission->data as $cid => &$item) {
      $component = $vars['components'][$cid];
      if (webform_storage_toggle_obfuscate_check($component)) {
        foreach ($item['value'] as &$value) {
          $value = _webform_storage_toggle_display_obfuscation_text();
        }
      }
    }
  }
}


/**
 * Implements hook_after_submission_obfuscation().
 *
 * Set up the data then invoke the Rules event.
 */
function webform_storage_toggle_after_submission_obfuscation($submission) {
  if (module_exists('rules')) {
    rules_invoke_event('after_submission_obfuscation', $submission);
  }
}

/**
 * Conditional expression repeated throughout our module
 *
 * @param $component
 * @return bool
 */
function webform_storage_toggle_obfuscate_check($component) {
  $toggle_settings = variable_get('webform_storage_toggle_settings');

  if (isset($toggle_settings[$component['nid']])) {
    $use_text_flag = $toggle_settings[$component['nid']]['null_flag'];
  } else {
    $use_text_flag = $toggle_settings['null_flag'];
  }

  return $use_text_flag? ($component['extra']['db_toggle'] == TRUE) && ($component['extra']['webform_storage_toggle_process_order'] == 'on') : FALSE;
}


/**
 * Helper function to recursively obfuscate values in a webform structure.
 */
function _webform_storage_toggle_obfuscated_values(&$element, $key = '#default_value', $restrict = array()) {

  // Loop through each item and kill the value.
  foreach (element_children($element) as $name) {
    $component = &$element[$name];
    //if (!empty($component['#webform_component']['extra']['db_toggle'])) {
    //if (($component['#webform_component']['extra']['db_toggle'] == TRUE) && ($component['#webform_component']['extra']['webform_storage_toggle_process_order'] == 'on')) {
    if (webform_storage_toggle_obfuscate_check($component['#webform_component'])) {
      if (is_array($component[$key])) {
        foreach ($component[$key] as &$value) {
          $value = _webform_storage_toggle_display_obfuscation_text($component['#webform_component']);
        }
      }
      else {
        $component[$key] = _webform_storage_toggle_display_obfuscation_text($component['#webform_component']);
      }
    }

    // Recurse if the current item has children.
    _webform_storage_toggle_obfuscated_values($component, $key, $restrict);
  }
}

/**
 * @return int
 */
function _webform_storage_toggle_obfuscate_value($component) {

  $toggle_settings = variable_get('webform_storage_toggle_settings');

  if (isset($toggle_settings[$component['nid']])) {
    $toggle_settings = $toggle_settings[$component['nid']];
  }

  $toggle_settings['use_textfield_replacement'] ? $text_replace = $toggle_settings['obfuscation_value'] : '';

  switch ($component['type']) {
    // Have never seen this type before. But just in case someone makes it.
    case 'boolean':
      return FALSE;

    case 'textarea':
    case 'textfield':
    case 'time':
    case 'date':
    case 'email':
      return $text_replace;

    case 'select':
      return $text_replace;

    case 'number':
      return NULL;

    default:
      return NULL;
  }
}

/**
 * When loading the content into a table output, use a different value then the display text.
 *
 * At present, we make it identical.
 *
 * TODO: possibly make this different with settings.
 *
 * @return variable value
 */
function _webform_storage_toggle_load_obfuscation_text($nid) {
  $toggle_settings = variable_get('webform_storage_toggle_settings');

  if (isset($toggle_settings[$nid])) {
    return $toggle_settings[$nid]['obfuscation_display_text'];
  } else {
    return $toggle_settings['obfuscation_display_text'];
  }
}

/**
 * Display the obfuscation text value as opposed to the actual field content.
 *
 * @return variable value
 */
function _webform_storage_toggle_display_obfuscation_text($component) {
  return _webform_storage_toggle_load_obfuscation_text($component['nid']);
}
